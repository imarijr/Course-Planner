(function(angular){
'use strict';
angular
    .module('root', [
        'common',
        'components',
        'templates',
        'ngMaterial'
    ]);})(window.angular);
(function(angular){
'use strict';
angular
  .module('common', [
    'ui.router',
    'ngMaterial',
    'ngParse',
  ])
  .run(function () {
    console.log("common module")
  });})(window.angular);
(function(angular){
'use strict';
angular 
    .module('components', 
    ['components.home',
    'components.semesters',
    'ngMaterial'
]); })(window.angular);
(function(angular){
'use strict';
angular
    .module('components.home', [
        'ui.router',
        'ngMaterial'
        
    ]);})(window.angular);
(function(angular){
'use strict';
angular
    .module('components.semesters', [
        'ui.router',
        'ngMaterial',
        'ui.sortable'
        
    ]);})(window.angular);
(function(angular){
'use strict';
var root = {
    templateUrl: './root.html'
  };
  
  angular
    .module('root')
    .component('root', root);



})(window.angular);
(function(angular){
'use strict';
var appNav = {
    templateUrl: './app-nav.html'
  };
  
  angular
    .module('common')
    .component('appNav', appNav);})(window.angular);
(function(angular){
'use strict';
var app = {
    templateUrl: './app.html',
    controller: 'AppController'
  };
  
  angular
    .module('common')
    .component('app', app)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('app', {
              redirectTo:  "home",
              url: '/',
              component: 'app',

            }
          
        )
    }]);})(window.angular);
(function(angular){
'use strict';
config.$inject = ["ParseProvider", "$locationProvider"];
function config(ParseProvider, $locationProvider) {
  ParseProvider.serverURL = 'https://parseapi.back4app.com'; // This is your Server URL
  ParseProvider.initialize(
    'UZwpFbGYPWGGKsVAt5vRzPbH1lSdX6u77OF3KrD5', // This is your Application ID
    'IpK6jyzdSSOGfqfM5SbA90UmakjLChfbEjcaPFBS' // This is your Javascript key
  );
  $locationProvider.hashPrefix('');
}

angular.module('common').config(config);})(window.angular);
(function(angular){
'use strict';
  AppController.$inject = ["$state"];
function AppController($state) {
    var ctrl = this;
    console.log("app controller")
  }
  
  angular
    .module('common')
    .controller('AppController', AppController);})(window.angular);
(function(angular){
'use strict';
init.$inject = ["$uiRouter"];
function init( $uiRouter){
    var Visualizer = window['ui-router-visualizer'].Visualizer;
    var plugInstance = $uiRouter.plugin(Visualizer);
}

angular.module('common').run(init)})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc service
 * @name common.service:CourseModel
 *
 * @description Model and helper methods for CourseModel parse object.
 */

class CourseModel {
    constructor(Parse, MajorModel) {
        this.Parse = Parse;
        this.MajorModel = MajorModel
        this.data = {};
        this.collection = [];
        this.name = 'Course';
        this.fields = [
            'courseName',
            'corequisites',
            'semesterDefault', 
            'courseId',
            'semesterRequired',
            'attributes',
            'defaultMajor',
            'credits',
            'prerequisites'
        ];
    }
    New(obj) {
        if (angular.isUndefined(obj)) {
            const parseObject = new this.Parse.Object(this.name);
            this.Parse.defineAttributes(parseObject, this.fields);
            // parseObject.major = new this.Parse.Object(this.MajorModel.name)
            // this.Parse.defineAttributes(parseObject.major); 
            return parseObject;
        } else {
            this.Parse.defineAttributes(obj, this.fields);
            // this.Parse.defineAttributes(obj.major, this.MajorModel.fields); 
            return obj;
        }
    }
    getById(id) {
        console.log(id)
        return new this.Parse.Query(this.New())
            .equalTo("objectId", id)
            .find()
            .then(result => {
                console.log('result', result)
                this.Parse.defineAttributes(result, this.fields);
                this.data = result;
                return Promise.resolve(result);
            })
            .catch(error => Promise.reject(error));
    }

    getByName(name) {
        console.log("name passed in: ", name)
        return new this.Parse.Query(this.New())
            .equalTo("courseName", name)
            .find()
            .then(result => {
                console.log('result: ', result[0]);         // no two courses should have the same name
                                                                    // so should only be one result
                //this.Parse.defineAttributes(result[0], this.fields); 
                //this.data = result[0]; 
                return Promise.resolve(result[0]); 
            })
            .catch(error => Promise.reject(error))
    }

    getByMajor(major) {
        return new this.Parse.Query(this.New())
            .include('major')
            .equalTo('major', major)
            .find()
            .then(courses => {
                courses.forEach(course => {
                    this.Parse.defineAttributes(course, this.fields);
                    this.Parse.defineAttributes(course.major, this.CourseModel.fields);
                })
                this.collection = courses;
                console.log("getByMajor", this.collection)
                return Promise.resolve(courses);
            })
            .catch(error => Promise.reject(error));
    }

    setSemesterDefault(id, sem) {
        //myobj = new this.Parse.Query(this.New())
        return new this.Parse.Query(this.New())
            .get(id)
            .then(result => {
                // this.Parse.defineAttributes(result, this.fields);
                // this.data = result; 
                result.set("semesterDefault", sem); 
                console.log('new default should be 3: ', result); 
                result.save(); 
                return Promise.resolve(result); 
            }).catch(error => Promise.reject(error))
    }

    removeSemesterDefault(id) {
        //myobj = new this.Parse.Query(this.New())
        return new this.Parse.Query(this.New())
            .get(id)
            .then(result => {
                // this.Parse.defineAttributes(result, this.fields);
                // this.data = result; 
                result.set("semesterDefault", null); 
                console.log('new default should be 3: ', result); 
                result.save(); 
                return Promise.resolve(result); 
            }).catch(error => Promise.reject(error))
    }

    getCourseBySem(semDef) {
        return new this.Parse.Query(this.New())
            .equalTo("semesterDefault", semDef)
            .find().then(result => {
                this.data = result;
                console.log("result of getCourseBySem: ", result);
                return Promise.resolve(result);
            })
            .catch(error => Promise.reject(error));
    }

    getCourses() {
        return new this.Parse.Query(this.New())
            .find().then(result => {
                return Promise.resolve(result); 
            })
            .catch(error => Promise.reject(error)); 
    }
}

angular
    .module('common')
    .service('CourseModel', CourseModel);
})(window.angular);
(function(angular){
'use strict';
class JSONService {
    constructor($http){
        this.$http = $http
    }

    getSemesterData() {
        return this.$http({
            method: 'GET',
            url: '../data.json',
        })
    }
    getClassData() {
        return this.$http({
            method: 'GET',
            url: '../addClass.json',
        })
    }

}

angular
    .module('common')
    .service('JSONService', JSONService);})(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc service
 * @name common.service:MajorModel
 *
 * @description Model and helper methods for MajorModel parse object.
 */

class MajorModel {
    constructor(Parse) {
        this.Parse = Parse;
        this.data = {};
        this.collection = [];
        this.name = 'Major';
        this.fields = [
            'credits',
            'majorName',
            'college'
        ];
    }
    New(obj) {
        if (angular.isUndefined(obj)) {
            const parseObject = new this.Parse.Object(this.name)
            this.Parse.defineAttributes(parseObject, this.fields);
            return parseObject;
        } else {
            this.Parse.defineAttributes(obj, this.fields);
            return obj;
        }
    }
    getById(id) {
        return new this.Parse.Query(this.New())
            .get(id)
            .then(result => {
                console.log('result', result)
                this.Parse.defineAttributes(result, this.fields);
                this.data = result;
                return Promise.resolve(result);
            })
            .catch(error => Promise.reject(error));
    }
    getByName(name) {
        return new this.Parse.Query(this.New())
            .equalTo("majorName", name)
            .find().then(result => {
                console.log('result', result)
                this.Parse.defineAttributes(result, this.fields); 
                this.data = result; 
                return Promise.resolve(result); 
            })
            .catch(error => Promise.reject(error))
    }
    getMajors() {
        return new this.Parse.Query(this.New())
        .find().then(result => {
            this.data = result
            return Promise.resolve(result);
        })
        .catch(error => Promise.reject(error));
    }
}

angular
    .module('common')
    .service('MajorModel', MajorModel);
})(window.angular);
(function(angular){
'use strict';
var home = {
    templateUrl: './home.html',
    controller: 'HomeController',

}

angular
    .module('components.home')
    .component('home', home)
    .config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
        $stateProvider.state('home', {
            parent: 'app',
            url: 'home',
            component: 'home'
        })
    $urlRouterProvider.otherwise('/');
    }]); 

    })(window.angular);
(function(angular){
'use strict';

/**
 * @ngdocs directive
 * 
 * @function HomeController
 * 
 * @param {*} $state 
 * @param {*} MajorModel 
 * 
 * @description
 * Home controller for the first page which displays the major options in the dropdown list.
 */

  HomeController.$inject = ["$state", "MajorModel"];
function HomeController($state, MajorModel) {
    var ctrl = this;
      this.$onInit = function () {
      console.log("home controller")
      let majors_list = []
      MajorModel.getMajors().then(function(majors) {
        for (var i = 0; i < majors.length; i++) {
          majors_list.push(majors[i].attributes.majorName)
        }
        ctrl.majors = majors_list;
      })
    }
  }


angular
    .module('components.home')
    .controller('HomeController', HomeController);})(window.angular);
(function(angular){
'use strict';
var semesters = {
    templateUrl: './semesters.html',
    controller: 'SemestersController',

}

angular
    .module('components.semesters')
    .component('semesters', semesters)
    .config(["$stateProvider", function ($stateProvider) {
        $stateProvider.state('semesters', {
            parent: 'app',
            url: 'semesters',
            component: 'semesters'
        })
    }])

    })(window.angular);
(function(angular){
'use strict';
/**
 * @ngdoc directive 
 * 
 * @function SemestersController
 * 
 * @param {*} $http 
 * @param {*} $mdDialog 
 * @param {*} JSONService 
 * @param {*} CourseModel 
 * @param {*} $window 
 * 
 * @description
 * The semesters controller is used for the semesters page. 
 */

SemestersController.$inject = ["$http", "$mdDialog", "JSONService", "CourseModel", "$window"];
function SemestersController($http, $mdDialog, JSONService, CourseModel, $window) {
    var ctrl = this;
    console.log("semesters controller")

    /**
     * @ngdoc directive
     * @function populateLists 
     * @param {*} CourseModel
     * 
     * @description
     * This function is used to generate all 8 semesters on the semesters page. For each semester, if a class' 
     * default semester is set to that specific semester the class gets added to that semester.
     */

    function populateLists(CourseModel) {
        ctrl.models = {
            selected: null,
            semesters: {
                1: [],
                2: [],
                3: [],
                4: [],
                5: [],
                6: [],
                7: [],
                8: []
            },
            prereqs: {}, // will be key value pair of class name and prereqs list 
            names: {},
            credits: {},
            creditTotal: [0, 0, 0, 0, 0, 0, 0, 0],
            conflictingClasses: []
        };
        // sem 1 
        console.log("populating lists")
        var courses =  CourseModel.getCourseBySem(1).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[1].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[0] += courses[idx].attributes.credits;
            }
        })

        // sem 2 
        courses =  CourseModel.getCourseBySem(2).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[2].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[1] += courses[idx].attributes.credits;
            }
        })

        // sem 3 
        courses =  CourseModel.getCourseBySem(3).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[3].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[2] += courses[idx].attributes.credits;
            }
        })

        // sem 4
        courses =  CourseModel.getCourseBySem(4).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[4].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[3] += courses[idx].attributes.credits;
            }
        })

        // sem 5
        courses =  CourseModel.getCourseBySem(5).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[5].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[4] += courses[idx].attributes.credits;
            }
        })

        // sem 6
        courses =  CourseModel.getCourseBySem(6).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[6].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[5] += courses[idx].attributes.credits;
            }
        })

        // sem 7
        courses =  CourseModel.getCourseBySem(7).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[7].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[6] += courses[idx].attributes.credits;
            }
        })

        // sem 8
        courses =  CourseModel.getCourseBySem(8).then(function(courses) {
            for (var idx=0; idx<courses.length; idx++) {
                var className = courses[idx].attributes.courseName;   // ie "Calculus II" 
                ctrl.models.semesters[8].push(className);
                ctrl.models.prereqs[className] = courses[idx].attributes.prerequisites;     // ie ["MATH 10550"]
                ctrl.models.names[className] = courses[idx].attributes.courseId;            // ie "MATH 10560"
                ctrl.models.credits[className] = courses[idx].attributes.credits;           // ie 3
                ctrl.models.creditTotal[7] += courses[idx].attributes.credits;
            }
        })

    }

    /**
     * @ngdoc directive
     * 
     * @function calculateCreditTotalsPrereqs
     * 
     * @description
     * This function is used to check if there are too many classes in a semester (goes over credit maximum) and all prereqs are satisfied.
     */

    function calculateCreditTotalsPrereqs() {
        angular.forEach(ctrl.models.semesters, function (value, key) {
            for (let i=0; i<value.length; i++) {
                ctrl.models.creditTotal[key-1] += ctrl.models.credits[ctrl.models.semesters[key][i]]
            }
        })


        // Connects semester lists for drap and drop
        ctrl.classWarning = false

        ctrl.courseMap = {
            stop: function (e, ui) {
                //reset creditTotals
                console.log("calculating credits")
                ctrl.models.creditTotal = [0, 0, 0, 0, 0, 0, 0, 0]
                ctrl.classWarning = false
                //console.log("Updated Course Map", JSON.stringify(ctrl.models.semesters, undefined, 2))
                var currentClasses = []
                // loop through semesters
                for (let i = 1; i < 9; i++) {
                    length = ctrl.models.semesters[i].length

                    // loop through classes
                    for (let j = 0; j < length; j++) {
                        // calculate new credit totals
                        ctrl.models.creditTotal[i - 1] += ctrl.models.credits[ctrl.models.semesters[i][j]]

                        // make sure that moves get saved to parse - save each class+semester
                        CourseModel.getByName(ctrl.models.semesters[i][j]).then(function(course) {
                            console.log("course back from get by name: ", course)
                            CourseModel.setSemesterDefault(course.id, i).then(function(success) {
                            console.log("success!")
                            });
                        })
                        var prereqs = ctrl.models.prereqs[ctrl.models.semesters[i][j]]
                        if (prereqs != null) {
                            var plength = prereqs.length
                            // loop through prerequisites 
                            for (let m = 0; m < plength; m++) {
                                if (currentClasses.includes(prereqs[m]) == false) {
                                    console.log("breaking a prerequisities rule: ") // if prereq not in "taken" classes
                                    console.log(prereqs[m])
                                    ctrl.classWarning = true
                                    console.log(ctrl.classWarning)
                                }
                            }
                        }
                    }

                    // append on all classes you've taken so far, including this semester
                    for (let k = 0; k < length; k++) {
                        var classnum = ctrl.models.names[ctrl.models.semesters[i][k]]
                        currentClasses.push(classnum)

                    }
                }
                console.log("Credits: ", ctrl.models.creditTotal)
            },
            placeholder: "course",
            connectWith: ".course-list"
        }
    }

    populateLists(CourseModel); 
    calculateCreditTotalsPrereqs(); 
    
    ctrl.addClass = function(event, semester) {
        console.log('semester: ', semester)
        var config = {
            parent: angular.element(document.body),
            controller: AddClassController,
            controllerAs: '$ctrl',
            disableParentScroll: true, 
            templateUrl: './addclass.html',
            hasBackdrop: true, 
            trapFocus: true, 
            clickOutsideToClose: true, 
            escapeToClose: true, 
            focusOnOpen: true,
            fullscreen: true, 
            targetEvent: event
        }

        $mdDialog.show(config)
            .then(answer => {
                console.log('answer: ', answer); 
            })


    /**
     * @ngdoc directive
     * 
     * @function AddClassController
     * 
     * @param {*} $state 
     * @param {*} $mdDialog 
     * @param {*} $http 
     * @param {*} JSONService 
     * @param {*} CourseModel 
     * @param {*} $window 
     * 
     * @description
     * This function acts as the add class controller (which is no loner its own page, but a popup). When the add class button is clicked,
     * all the classes that do not have a default semester populate the dialogue window. When a class gets added, once the data is returned from 
     * the db, the popup closes and the page refreshes to reflect the updated semester view.
     */

    function AddClassController($state, $mdDialog, $http, JSONService, CourseModel, $window) {
        var ctrl = this;
        console.log("running controller")
        ctrl.allClasses = []
        CourseModel.getCourses().then(function(courses) {
        console.log('courses: ', courses); 
        for (var i = 0; i < courses.length; i++) {
            if (courses[i].attributes.semesterDefault == null) {
            ctrl.allClasses.push(courses[i])
            console.log(courses[i].attributes.courseName)
            }
        }
        console.log('courses listed...', ctrl.allClasses)
        }).catch(function() {
        console.log("couldn't fetch courses")
        })

        console.log('courses listed...', ctrl.allClasses)

        // go through each of the classes to get the description of the class
        ctrl.doSecondaryAction = function(event, description) {
            $mdDialog.show(
                $mdDialog.alert()
                .title("Course Description")
                .textContent(description)
                .ok('Ok')
                .targetEvent(event)
            );
        };

        ctrl.addCourseToSemester = function(event, course) {
            CourseModel.getByName(course).then(function(course) {
                console.log('sending id to setSemesterDefault')
                CourseModel.setSemesterDefault(course.id, parseInt(semester)).then(function(success) {
                    console.log('set new default')
                }).catch(function () {
                    populateLists(CourseModel);
                    console.log('failed to set new default.'); 
                })
                
                $mdDialog.cancel().then(function() {
                    console.log("successfully closed.")
                    $state.reload();
                }).catch(function () {
                    console.log("failed to close.");
                })

            }).catch(function() {
                console.log()
                console.log('failed to get class')
            })
        }
    }
}

     // delete class "controller"
     ctrl.deleteClass = function(event, semester) {
        console.log('semester: ', semester)
        var config = {
            parent: angular.element(document.body),
            controller: DeleteClassController,
            controllerAs: '$ctrl',
            disableParentScroll: true, 
            templateUrl: './deleteclass.html',
            hasBackdrop: true, 
            trapFocus: true, 
            clickOutsideToClose: true, 
            escapeToClose: true, 
            focusOnOpen: true,
            fullscreen: true, 
            targetEvent: event
        }

        $mdDialog.show(config)
            .then(answer => {
                console.log('answer: ', answer); 
            })


        /**
         * @ngdoc directive
         * 
         * @function DeleteClassController
         * 
         * @param {*} $state 
         * @param {*} $mdDialog 
         * @param {*} $http 
         * @param {*} JSONService 
         * @param {*} CourseModel 
         * @param {*} $window 
         * 
         * @description
         * This function acts as the delete class controller, which now generates each class in a semester on a popup. If the delete button is 
         * clicked, the semester default value is set to null in the database. Once the process from the db is returned the popup closes and 
         * the page refreshes with the updated semester list.
         */
        
        function DeleteClassController($state, $mdDialog, $http, JSONService, CourseModel, $window) {
            var ctrl = this;
            ctrl.allClasses = []
            console.log("semester...? ", semester)
            CourseModel.getCourseBySem(parseInt(semester)).then(function(courses) {
            console.log('courses: ', courses); 
            for (var i = 0; i < courses.length; i++) {
                ctrl.allClasses.push(courses[i])
                console.log(courses[i].attributes.courseName)
            }
            console.log('courses listed...', ctrl.allClasses)
            }).catch(function() {
            console.log("couldn't fetch courses")
            })
    
            console.log('courses listed...', ctrl.allClasses)
        
            // go through each of the classes to get the description of the class
            ctrl.doSecondaryAction = function(event, description) {
                $mdDialog.show(
                    $mdDialog.alert()
                    .title("Course Description")
                    .textContent(description)
                    .ok('Ok')
                    .targetEvent(event)
                );
            };
        
            ctrl.removeCourseFromSemester = function(event, course) {
                CourseModel.getByName(course).then(function(course) {
                    console.log('sending id to setSemesterDefault')
                    CourseModel.removeSemesterDefault(course.id).then(function(success) {
                        console.log('set new default')
                    }).catch(function () {
                        populateLists(CourseModel);
                        console.log('failed to set new default.'); 
                    })
        
                    $mdDialog.cancel().then(function() {
                        console.log("closed popup");
                        $state.reload();
                    }).catch(function () {
                        console.log("failed to close");
                    })
        
                }).catch(function() {
                    console.log()
                    console.log('failed to get class')
                })
            }
        }    
    }
}

angular
    .module('components.semesters')
    .controller('SemestersController', SemestersController);})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div class="root">\r\n    <div ui-view></div>\r\n</div>');
$templateCache.put('./app-nav.html','<header>\r\n  <md-toolbar>\r\n      <div class="md-toolbar-tools" layout="row" layout-align="space-between center">\r\n          <div>\r\n              <a href="#"><i class="material-icons">home</i></a>\r\n          </div>\r\n          <div>\r\n              <h3>Course Planner</h3>\r\n          </div>\r\n      </div>\r\n  </md-toolbar>\r\n</header>');
$templateCache.put('./app.html','<div class="root">\r\n  <div>\r\n    <div ui-view></div>\r\n  </div>\r\n</div>');
$templateCache.put('./home.html','<app-nav></app-nav>\r\n<md-input-container class="md-block" flex-gt-sm>\r\n    <h2>Choose your major to get started.</h2>\r\n    <label>My Major</label>\r\n    <md-select ng-model="majorChosen" ng-change="onChange()">\r\n      <!-- stateful component -->\r\n      <md-option ng-repeat="major in $ctrl.majors" value="{{major}}">\r\n        {{major}}\r\n      </md-option>\r\n    </md-select>\r\n  </md-input-container>\r\n\r\n  <md-button md-no-ink class="md-go-button" ng-click = "saveMajor()" href="#/semesters">Go</md-button>');
$templateCache.put('./addclass.html','<!-- stateful component -->\r\n  <md-input-container class="md-block-addclass" flex-gt-sm>\r\n      <h1 class="additional-options">Additional Class Options</h1> \r\n    <!-- stateless component -->\r\n    <md-list-item ng-repeat="course in $ctrl.allClasses" value="{{course.attributes.courseName}}" class="secondary-button-padding-class addClass-items">\r\n      <p>{{course.attributes.courseName}}</p>\r\n      <md-button class="md-secondary" ng-click="$ctrl.addCourseToSemester($event, course.attributes.courseName)" href="#/semesters">add class</md-button>\r\n    </md-list-item>\r\n  </md-input-container>\r\n');
$templateCache.put('./deleteclass.html','<!-- stateful component -->\r\n<md-input-container class="md-block-addclass" flex-gt-sm>\r\n    <h1 class="additional-options">Remove Class</h1> \r\n  <!-- stateless component -->\r\n  <md-list-item ng-repeat="course in $ctrl.allClasses" value="{{course.attributes.courseName}}" class="secondary-button-padding-class">\r\n    <p>{{course.attributes.courseName}}</p>\r\n    <md-button class="md-secondary" ng-click="$ctrl.removeCourseFromSemester($event, course.attributes.courseName)" href="#/semesters">remove class</md-button>\r\n  </md-list-item>\r\n</md-input-container>\r\n');
$templateCache.put('./semesters.html','<app-nav></app-nav>\r\n<div class="course-map">\r\n    <md-content layout-padding>\r\n        <div ng-show="$ctrl.classWarning" class="warning-text">\r\n            One or more classes need adjusting to satisfy prerequisite requirements. \r\n        </div>\r\n        <!-- Grid List to Keep even layout -->\r\n        <md-grid-list  md-cols-sm="1" md-cols-md="1" md-cols-lg="2" md-cols-gt-lg="3" md-cols=1 md-row-height-md="1:1" md-row-height="1.2:1"\r\n            md-gutter-gt-md="16px" md-gutter-md="8px" md-gutter="4px">\r\n            <!-- Each Tile holds a list of semester courses -->\r\n            <!-- stateful component -->\r\n            <md-grid-tile ng-repeat="(key, semester) in $ctrl.models.semesters">\r\n                <!-- ui-sortable allows drag drop sorting of \r\n                    arrays courseMap is the drag drop group -->\r\n                    <!-- stateless component -->\r\n                <md-list ui-sortable="$ctrl.courseMap" class="course-list" ng-model="semester">\r\n                    <md-subheader class="md-no-sticky">Semester {{$index+1}}</md-subheader>\r\n                    <!-- repeats each class in a semester -->\r\n                    <md-list-item ng-repeat="item in semester" class="md-2-line course">\r\n                        <div class="md-list-item-text">\r\n                            {{item}}\r\n                        </div>\r\n                        <md-divider></md-divider>\r\n                    </md-list-item>\r\n                    <!-- display the running total of credits for each semester-->\r\n                    <div style="margin: 30px"></div>\r\n                    <p>Credits: {{$ctrl.models.creditTotal[$index]}}\r\n                    <md-button style="float: right; margin-top: -10px" ng-click = "$ctrl.deleteClass($event, key)">Delete Class</md-button>\r\n                    <md-button style="float: right; margin-top: -10px" ng-click = "$ctrl.addClass($event, key)">Add Class</md-button></p>\r\n                </md-list>\r\n            </md-grid-tile>\r\n        </md-grid-list>\r\n    </md-content>\r\n</div>');}]);})(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
